commands:
    aeplugin_install_devmode:
        steps:
            - run:
                command: |
                    export PLUGIN_VERSION=<< pipeline.parameters.aeplugin_devmode_version >>
                    curl -fsSLOJ https://github.com/aeternity/aeplugin_dev_mode/releases/download/v$PLUGIN_VERSION/aeplugin_dev_mode.tar.gz
                    tar -zxf aeplugin_dev_mode.tar.gz -C plugins/
                name: Download devmode plugin
    build_package:
        steps:
            - run:
                command: |
                    # Ensure rocksdb gets build statically
                    rm -rf _build/default/lib/rocksdb/
                    rm -rf _build/default/lib/mnesia_rocksdb
                    # Build the package
                    make prod-package
                    mkdir ${PACKAGES_DIR:?}
                    mv _build/prod/rel/aeternity/aeternity-$(cat VERSION).tar.gz ${PACKAGE_TARBALL:?}
                environment:
                    ERLANG_ROCKSDB_OPTS: -DWITH_BUNDLE_LZ4=ON -DWITH_BUNDLE_SNAPPY=ON
                    PACKAGES_DIR: << pipeline.parameters.packages_workspace >>
                name: Build Package Tarball
    build_ubuntu_package:
        steps:
            - run:
                command: |
                    make distclean
                    make prod-deb-package
                    mkdir ${PACKAGES_DIR:?}
                    mv _build/../../*aeternity-node_*.deb ${PACKAGES_DIR:?}
                environment:
                    DEB_SKIP_DH_AUTO_CLEAN: "true"
                    ERLANG_ROCKSDB_BUILDOPTS: -j2
                    ERLANG_ROCKSDB_OPTS: -DWITH_BUNDLE_LZ4=ON -DWITH_BUNDLE_SNAPPY=ON
                    PACKAGES_DIR: << pipeline.parameters.packages_workspace >>
                name: Build Ubuntu package (*.deb)
    collect_system_test_host_logs:
        steps:
            - run:
                command: |
                    mkdir ${SYSTEM_TEST_HOST_LOGS_DIR:?}
                    dmesg > ${SYSTEM_TEST_HOST_LOGS_DIR:?}/dmesg.log
                environment:
                    SYSTEM_TEST_HOST_LOGS_DIR: << pipeline.parameters.system_test_host_logs >>
                name: Collect system test host logs
                when: always
    deploy_steps:
        steps:
            - fixed_checkout
            - set_package_path
            - attach_workspace:
                at: << pipeline.parameters.packages_workspace >>
            - run:
                command: |
                    export PACKAGE=${PACKAGE_TARBALL:?}
                    export DEPLOY_DB_VERSION=$(cat deployment/DB_VERSION)
                    cd /infrastructure && make deploy
                environment:
                    PACKAGES_DIR: << pipeline.parameters.packages_workspace >>
                name: Deploy
    docker_build_branch:
        parameters:
            tag_suffix:
                default: ""
                type: string
        steps:
            - run:
                command: |
                    docker pull aeternity/builder:bionic-otp22
                    docker build -t ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH/\//_}<< parameters.tag_suffix >> .
                name: Build branch docker image
            - run:
                command: |
                    docker run -d -e AE__CHAIN__PERSIST -e AE__FORK_MANAGEMENT__NETWORK_ID \
                      --name ae_${CIRCLE_SHA1:?} \
                      ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH/\//_}<< parameters.tag_suffix >> \
                      bin/aeternity console -noinput -network_id ae_test
                name: Start branch docker image
            - run:
                background: true
                command: |
                    docker logs -f ae_${CIRCLE_SHA1:?}
                name: Display logs from branch docker image
            - run:
                command: |
                    docker exec -it ae_${CIRCLE_SHA1:?} curl -4 --retry-connrefused --max-time 60 --retry 6 --connect-timeout 10 http://localhost:3013/v2/status
                name: Wait for container to be ready
            - run:
                command: |
                    until [ "`docker inspect -f {{.State.Health.Status}} ae_${CIRCLE_SHA1:?}`"=="healthy" ]; do
                        sleep 1;
                    done;
                name: Health check
    docker_login:
        steps:
            - setup_secrets
            - run:
                command: |
                    docker login -u $(</secrets/DOCKER_USER) -p $(</secrets/DOCKER_PASS)
                name: Login to Docker Hub
    eunit_steps_otp22:
        steps:
            - fixed_checkout
            - restore_rebar_cache
            - restore_build_otp22_cache
            - run:
                command: |
                    epmd -daemon
                    make ${MAKE_TARGET:?}
                name: Test
            - store_test_results:
                path: eunit_report
            - store_rebar3_crashdump
            - fail_notification
    eunit_steps_otp23:
        steps:
            - fixed_checkout
            - restore_rebar_cache
            - restore_build_otp23_cache
            - run:
                command: |
                    epmd -daemon
                    make ${MAKE_TARGET:?}
                name: Test
            - store_test_results:
                path: eunit_report
            - store_rebar3_crashdump
            - fail_notification
    fail_notification:
        steps:
            - run:
                command: |
                    if [ -n "$CIRCLE_BRANCH" ]; then
                      if [ "$CIRCLE_BRANCH" = "${NOTIFY_BRANCH:?}" ]; then
                        HOOK_DATA=$(printf "$HOOK_TEMPLATE" "${CIRCLE_JOB:?}" "${CIRCLE_BRANCH:?}" "${CIRCLE_USERNAME:-unknown}" "${CIRCLE_BUILD_URL:?}")
                        curl -X POST -H 'Content-Type: application/json' ${ROCKET_HOOK_URL:?} --data "${HOOK_DATA:?}"
                      fi
                    fi
                environment:
                    HOOK_TEMPLATE: |
                        {
                          "text": "CircleCI job **%s** failed on branch **%s** by @%s",
                          "attachments": [
                            {
                              "title": "Build Link",
                              "title_link": "%s",
                              "color": "#FAD6D6"
                            }
                          ]
                        }
                    NOTIFY_BRANCH: << pipeline.parameters.master_branch >>
                name: Send failure notification
                when: on_fail
    fail_notification_nix:
        steps:
            - run:
                command: |
                    if [ -n "$CIRCLE_BRANCH" ]; then
                      if [ "$CIRCLE_BRANCH" = "${NOTIFY_BRANCH:?}" ]; then
                        HOOK_DATA=$(printf "$HOOK_TEMPLATE" "${CIRCLE_JOB:?}" "${CIRCLE_BRANCH:?}" "${CIRCLE_USERNAME:-unknown}" "${CIRCLE_BUILD_URL:?}")
                        nix-shell webhook.nix -j auto --run "curl -X POST -H 'Content-Type: application/json' ${ROCKET_HOOK_URL:?} --data \"${HOOK_DATA:?}\""
                      fi
                    fi
                environment:
                    HOOK_TEMPLATE: |
                        {
                          "text": "CircleCI job **%s** failed on branch **%s** by @%s",
                          "attachments": [
                            {
                              "title": "Build Link",
                              "title_link": "%s",
                              "color": "#FAD6D6"
                            }
                          ]
                        }
                    NOTIFY_BRANCH: << pipeline.parameters.master_branch >>
                name: Send failure notification
                when: on_fail
    fail_notification_system_test:
        steps:
            - run:
                command: |
                    if [ -n "$CIRCLE_BRANCH" ]; then
                      if [ "$CIRCLE_BRANCH" = "${NOTIFY_BRANCH:?}" ]; then
                        HOOK_DATA=$(printf "$HOOK_TEMPLATE" "${CIRCLE_JOB:?}" "${CIRCLE_BRANCH:?}" "${CIRCLE_USERNAME:-unknown}" "${CIRCLE_BUILD_URL:?}")
                        curl -X POST -H 'Content-Type: application/json' ${ROCKET_HOOK_URL_SYSTEM_TEST:?} --data "${HOOK_DATA:?}"
                      fi
                    fi
                environment:
                    HOOK_TEMPLATE: |
                        {
                          "text": "CircleCI job **%s** failed on branch **%s** by @%s",
                          "attachments": [
                            {
                              "title": "Build Link",
                              "title_link": "%s",
                              "color": "#FAD6D6"
                            }
                          ]
                        }
                    NOTIFY_BRANCH: << pipeline.parameters.master_branch >>
                name: Send failure notification on system test
                when: on_fail
    fixed_checkout:
        steps:
            - checkout
            - run:
                command: |
                    if [ -n "$CIRCLE_TAG" ]; then
                      git reset --hard $(git rev-parse "$CIRCLE_TAG")
                    fi
                name: Reset to proper SHA1
    install_libsodium:
        steps:
            - run:
                command: |
                    LIBSODIUM_DOWNLOAD_URL="https://github.com/jedisct1/libsodium/releases/download/${LIBSODIUM_VERSION}/libsodium-${LIBSODIUM_VERSION}.tar.gz" \
                      && curl -fsSL -o libsodium-src.tar.gz "$LIBSODIUM_DOWNLOAD_URL" \
                      && mkdir libsodium-src \
                      && tar -zxf libsodium-src.tar.gz -C libsodium-src --strip-components=1 \
                      && cd libsodium-src \
                      && ./configure && make -j$(nproc) && sudo make install && sudo ldconfig
                name: Install libsodium
    install_os_deps:
        steps:
            - run:
                command: |
                    sudo apt-get update
                    sudo apt-get -qq -y install git curl \
                      autoconf build-essential ncurses-dev libssl-dev libgmp-dev
                name: Install OS dependancies
    install_otp:
        steps:
            - run:
                command: |
                    # Install OTP package deps
                    sudo apt-get update && sudo apt-get install libwxbase3.0-dev libwxgtk3.0-dev libsctp1
                    # Install OTP binary package
                    PACKAGE_NAME=esl-erlang_${OTP_VERSION}-1~ubuntu~xenial_amd64.deb
                    OTP_DOWNLOAD_URL=https://packages.erlang-solutions.com/erlang/debian/pool/${PACKAGE_NAME}
                    curl -fsSL -o ${PACKAGE_NAME} "$OTP_DOWNLOAD_URL"
                    sudo dpkg -i ${PACKAGE_NAME}
                name: Install OTP
    install_system_smoke_test_deps:
        steps:
            - run:
                command: |
                    make system-smoke-test-deps
                name: Install deps for system smoke tests
    install_system_test_deps:
        steps:
            - run:
                command: |
                    make system-test-deps
                name: Install deps for system tests
    prepare_ubuntu_user:
        steps:
            - run:
                command: |
                    sudo usermod -aG docker ubuntu
                    sudo chown -R ubuntu:ubuntu ~/aeternity
                name: Prepare ubuntu user (1000:1000) to run docker commands
    print_system_test_host_info:
        steps:
            - run:
                command: |
                    uname -a
                    free -t -m
                name: Print system test host information
    publish_osx_package:
        parameters:
            branch:
                type: string
            packages_dir:
                type: string
        steps:
            - run:
                command: |
                    git clone git@github.com:aeternity/homebrew-aeternity.git --branch << parameters.branch >> --single-branch ~/homebrew-aeternity
                name: Checkout Homebrew repository
            - run:
                command: |
                    make VERSION
                    VERSION=$(cat VERSION)
                    PACKAGE_URL=https://github.com/aeternity/aeternity/releases/download/v$VERSION/aeternity-$VERSION-macos-x86_64.tar.gz
                    SHA256=$(sha256sum << parameters.packages_dir >>/aeternity-*-macos-x86_64.tar.gz | head -1 | cut -f 1 -d " ")
                    cd ~/homebrew-aeternity/
                    sed -i "s|^  url .*|  url \"$PACKAGE_URL\"|g" Formula/aeternity-node.rb
                    sed -i "s|^  version .*|  version \"$VERSION\"|g" Formula/aeternity-node.rb
                    sed -i "s|^  sha256 .*|  sha256 \"$SHA256\"|g" Formula/aeternity-node.rb
                name: Update the Homebrew formula
            - run:
                command: |
                    git config --global push.default simple
                    git config --global user.email "35604848+aeternity-bot@users.noreply.github.com"
                    git config --global user.name "Aeternity node CI"
                name: Setup git
            - run:
                command: |
                    make VERSION
                    VERSION=$(cat VERSION)
                    cd ~/homebrew-aeternity/
                    git add Formula/aeternity-node.rb
                    git diff --staged
                    git commit -m "Update aeternity-node formula to $VERSION"
                    git push
                name: Commit and push
    publish_ubuntu_package:
        parameters:
            component:
                type: string
            packages_dir:
                type: string
        steps:
            - run:
                command: |
                    git clone git@github.com:aeternity/apt-repo.git --branch inbox --single-branch ~/apt-repo
                name: Checkout APT repository
            - run:
                command: |
                    cp << parameters.packages_dir >>/aeternity-node*.deb ~/apt-repo/inbox/aeternity-node/<< parameters.component >>/
                name: Add deb packages
            - run:
                command: |
                    git config --global push.default simple
                    git config --global user.email "35604848+aeternity-bot@users.noreply.github.com"
                    git config --global user.name "Aeternity node CI"
                name: Setup git
            - run:
                command: |
                    cd ~/apt-repo
                    git add -A
                    git commit -m "Add aeternity node package to << parameters.component >>" || true
                    git push
                name: Commit and push
    restore_build_nix_cache:
        steps:
            - restore_cache:
                key: << pipeline.parameters.build_nix_cache_key >>
    restore_build_otp22_cache:
        steps:
            - restore_cache:
                key: << pipeline.parameters.build_otp22_cache_key >>
    restore_build_otp23_cache:
        steps:
            - restore_cache:
                key: << pipeline.parameters.build_otp23_cache_key >>
    restore_machine_build_cache:
        steps:
            - restore_cache:
                keys:
                    - << pipeline.parameters.machine_build_cache_key >>
                    - machine-build-cache-v19-{{ .Branch }}-
                    - machine-build-cache-v19-
    restore_macos_package_cache:
        steps:
            - restore_cache:
                key: << pipeline.parameters.macos_package_cache_key >>
    restore_rebar_cache:
        steps:
            - restore_cache:
                key: << pipeline.parameters.rebar_cache_key >>
    save_machine_build_cache:
        steps:
            - save_cache:
                key: << pipeline.parameters.machine_build_cache_key >>
                paths:
                    - _build
                    - .contracts_test_cache
    save_macos_package_cache:
        steps:
            - save_cache:
                key: << pipeline.parameters.macos_package_cache_key >>
                paths:
                    - /usr/local/Homebrew
                    - /usr/local/opt
                    - /usr/local/Cellar
    set_package_path:
        steps:
            - run:
                command: .circleci/scripts/set_package_path.sh
                environment:
                    PACKAGES_DIR: << pipeline.parameters.packages_workspace >>
                name: Set package path
    setup_docker:
        steps:
            - setup_remote_docker:
                docker_layer_caching: true
                version: 17.09.0-ce
    setup_secrets:
        steps:
            - run:
                command: cd /infrastructure && make secrets SECRETS_OUTPUT_DIR=/secrets
                name: Setup environment secrets
    store_package_artifacts:
        steps:
            - store_artifacts:
                destination: /
                path: << pipeline.parameters.packages_workspace >>
    store_rebar3_crashdump:
        steps:
            - store_artifacts:
                path: rebar3.crashdump
    test_arch_os_dependencies:
        steps:
            - run:
                command: |
                    make test-arch-os-dependencies
                name: Test architecture or OS specific functions
    test_steps_otp22:
        steps:
            - fixed_checkout
            - restore_rebar_cache
            - restore_build_otp22_cache
            - run:
                command: |
                    epmd -daemon
                    make ${MAKE_TARGET:?} CT_TEST_FLAGS="--suite=$(.circleci/scripts/split_suites.sh)"
                name: Test
            - run:
                command: |
                    mkdir _build/test/reports
                    mv _build/test/logs/junit.xml _build/test/reports/
                name: move test report
            - store_test_results:
                path: _build/test/reports
            - trim_test_artifacts
            - store_artifacts:
                path: _build/test/logs
            - store_rebar3_crashdump
            - fail_notification
    test_steps_otp23:
        steps:
            - fixed_checkout
            - restore_rebar_cache
            - restore_build_otp23_cache
            - run:
                command: |
                    epmd -daemon
                    make ${MAKE_TARGET:?} CT_TEST_FLAGS="--suite=$(.circleci/scripts/split_suites.sh)"
                name: Test
            - run:
                command: |
                    mkdir _build/test/reports
                    mv _build/test/logs/junit.xml _build/test/reports/
                name: move test report
            - store_test_results:
                path: _build/test/reports
            - trim_test_artifacts
            - store_artifacts:
                path: _build/test/logs
            - store_rebar3_crashdump
            - fail_notification
    trim_test_artifacts:
        steps:
            - run:
                command: |
                    find _build/test/logs -iname bin | xargs rm -rf
                    find _build/test/logs -iname data | xargs rm -rf
                    find _build/test/logs -iname releases | xargs rm -rf
                    find _build/test/logs -iname extensions | xargs rm -rf
                    find _build/test/logs -iname hooks | xargs rm -rf
                name: trim down artifacts
    upload_aws_build_artifacts:
        steps:
            - run:
                command: |
                    if [ -z "$CIRCLE_PR_NUMBER" ]; then
                      envdir /secrets aws s3 cp --acl public-read ${PACKAGE_TARBALL:?} s3://${S3_BUILDS_BUCKET:?}/
                      if [ -n "$CIRCLE_BRANCH" -a "$CIRCLE_BRANCH" = "master" ]; then
                        envdir /secrets aws s3 cp --acl public-read ${PACKAGE_TARBALL:?} s3://${S3_BUILDS_BUCKET:?}/aeternity-latest-${PKG_SUFFIX:?}${PKG_EXT:-".tar.gz"}
                      fi
                    fi
                name: Upload build artifacts to central repository (AWS)
    upload_aws_latest_artifacts:
        steps:
            - run:
                command: |
                    envdir /secrets aws s3 cp --acl public-read ${PACKAGE_TARBALL:?} s3://${S3_RELEASES_BUCKET:?}/aeternity-latest-${PKG_SUFFIX:?}${PKG_EXT:-".tar.gz"}
                name: Upload latest release artifacts to central repository (AWS)
    upload_aws_release_artifacts:
        steps:
            - run:
                command: |
                    envdir /secrets aws s3 cp --acl public-read ${PACKAGE_TARBALL:?} s3://${S3_RELEASES_BUCKET:?}/
                name: Upload release artifacts to central repository (AWS)
    upload_build_artifacts:
        steps:
            - fixed_checkout
            - set_package_path
            - setup_secrets
            - attach_workspace:
                at: << pipeline.parameters.packages_workspace >>
            - upload_aws_build_artifacts
            - fail_notification
    upload_github_release_artifacts:
        steps:
            - run:
                command: |
                    envdir /secrets /infrastructure/scripts/upload-github-release-assets.sh github_api_token=${GITHUB_API_TOKEN:?} \
                      owner=${CIRCLE_PROJECT_USERNAME} repo=${CIRCLE_PROJECT_REPONAME} \
                      tag=${CIRCLE_TAG} ASSETS=${PACKAGES_DIR:?}/*
                name: Upload GitHub Release Asset
    upload_latest_artifacts:
        steps:
            - fixed_checkout
            - set_package_path
            - setup_secrets
            - attach_workspace:
                at: << pipeline.parameters.packages_workspace >>
            - upload_aws_latest_artifacts
            - fail_notification
    upload_release_artifacts:
        steps:
            - fixed_checkout
            - set_package_path
            - setup_secrets
            - attach_workspace:
                at: << pipeline.parameters.packages_workspace >>
            - upload_github_release_artifacts
            - upload_aws_release_artifacts
executors:
    builder_container_1804:
        docker:
            - image: aeternity/builder:1804
              user: builder
        working_directory: /home/builder/aeternity
    builder_container_nix_alpine:
        docker:
            - image: nixorg/nix:circleci
        environment:
            ERLANG_ROCKSDB_BUILDOPTS: -j2
        working_directory: /home/circleci/aeternity
    builder_container_otp22:
        docker:
            - image: aeternity/builder:bionic-otp22
              user: builder
        environment:
            ERLANG_ROCKSDB_BUILDOPTS: -j2
            ERLANG_ROCKSDB_OPTS: -DWITH_SYSTEM_ROCKSDB=ON -DWITH_SNAPPY=ON -DWITH_LZ4=ON -DWITH_BZ2=ON -DWITH_ZSTD=ON
            OTP_VERSION: 22.3.4.9
        working_directory: /home/builder/aeternity
    builder_container_otp23:
        docker:
            - image: aeternity/builder:bionic-otp23
              user: builder
        environment:
            ERLANG_ROCKSDB_BUILDOPTS: -j2
            ERLANG_ROCKSDB_OPTS: -DWITH_SYSTEM_ROCKSDB=ON -DWITH_SNAPPY=ON -DWITH_LZ4=ON -DWITH_BZ2=ON -DWITH_ZSTD=ON
            OTP_VERSION: 23.3.4.5
        working_directory: /home/builder/aeternity
    buildpack:
        docker:
            - image: circleci/buildpack-deps:xenial
        environment:
            DOCKERHUB_REPO: aeternity/aeternity
        working_directory: /home/circleci/aeternity
    infrastructure_container_stable:
        docker:
            - image: aeternity/infrastructure:stable
        environment:
            DOCKERHUB_REPO: aeternity/aeternity
            S3_BUILDS_BUCKET: aeternity-node-builds
            S3_RELEASES_BUCKET: aeternity-node-releases
        resource_class: large
    infrastructure_container_unstable:
        docker:
            - image: aeternity/infrastructure:latest
        environment:
            DOCKERHUB_REPO: aeternity/aeternity
            S3_BUILDS_BUCKET: aeternity-node-builds
            S3_RELEASES_BUCKET: aeternity-node-releases
        resource_class: large
    machine_1604:
        environment:
            DOCKERHUB_REPO: aeternity/aeternity
            LIBSODIUM_VERSION: 1.0.16
            OTP_VERSION: 22.3.4.9
        machine:
            docker_layer_caching: true
            image: ubuntu-1604:201903-01
        resource_class: large
        working_directory: /home/circleci/aeternity
jobs:
    aevm_tests:
        executor: builder_container_otp22
        steps:
            - fixed_checkout
            - restore_rebar_cache
            - restore_build_otp22_cache
            - run:
                command: |
                    make aevm-test
                name: AEVM Tests
            - store_rebar3_crashdump
            - fail_notification
    build:
        executor: builder_container_otp22
        steps:
            - fixed_checkout
            - restore_rebar_cache
            - run:
                command: make test-build
                name: Build
            - save_cache:
                key: << pipeline.parameters.build_otp22_cache_key >>
                paths:
                    - _build
            - save_cache:
                key: << pipeline.parameters.rebar_cache_key >>
                paths:
                    - .cache/rebar3
            - store_rebar3_crashdump
            - fail_notification
    build_nix:
        executor: builder_container_nix_alpine
        steps:
            - fixed_checkout
            - restore_rebar_cache
            - restore_build_nix_cache
            - run:
                command: nix-shell -j auto --run "make KIND=test"
                name: Build
            - save_cache:
                key: << pipeline.parameters.build_nix_cache_key >>
                paths:
                    - _build
            - save_cache:
                key: << pipeline.parameters.rebar_cache_key >>
                paths:
                    - .cache/rebar3
            - store_rebar3_crashdump
            - fail_notification_nix
    build_otp23:
        executor: builder_container_otp23
        steps:
            - fixed_checkout
            - restore_rebar_cache
            - run:
                command: make test-build
                name: Build
            - save_cache:
                key: << pipeline.parameters.build_otp23_cache_key >>
                paths:
                    - _build
            - save_cache:
                key: << pipeline.parameters.rebar_cache_key >>
                paths:
                    - .cache/rebar3
            - store_rebar3_crashdump
            - fail_notification
    build_uml_diagrams:
        docker:
            - image: circleci/openjdk:11-jdk-stretch
        steps:
            - fixed_checkout
            - run:
                command: |
                    sudo apt-get -qq -y update && sudo apt-get -qq -y install graphviz librsvg2-bin
                name: Install PlantUML dependencies
            - run: make build-uml
            - store_artifacts:
                path: docs/state-channels
            - fail_notification
    db_smoke_test:
        docker:
            - image: circleci/buildpack-deps:bionic
        environment:
            - AE__CHAIN__PERSIST: true
            - PACKAGES_DIR: << pipeline.parameters.packages_workspace >>
        steps:
            - fixed_checkout
            - run:
                command: sudo apt-get update && sudo apt-get install -y libsodium23 libtinfo5 libssl1.0
                name: Install OS Deps
            - set_package_path
            - attach_workspace:
                at: << pipeline.parameters.packages_workspace >>
            - run:
                command: mkdir node_new && tar -xvf ${PACKAGE_TARBALL:?} -C ./node_new
                name: Unzip built node
            - run:
                command: wget https://releases.aeternity.io/aeternity-latest-ubuntu-x86_64.tar.gz
                name: Download latest release package
            - run:
                command: mkdir node_stable && tar -xvf aeternity-latest-ubuntu-x86_64.tar.gz -C ./node_stable
                name: Unzip stable node
            - run:
                command: |
                    ./node_stable/bin/aeternity start
                    sleep 60 # Let it sync a bit
                    curl http://localhost:3013/v2/status
                    ./node_stable/bin/aeternity stop
                name: Generate an old DB
            - run:
                command: |
                    cp -r ./node_stable/data/mnesia ./node_new/data/
                    ./node_new/bin/aeternity start
                    sleep 30
                    curl http://localhost:3013/v2/status
                    ./node_new/bin/aeternity stop
                name: Test DB compatibility
    deploy_dev1:
        environment:
            - DEPLOY_ENV: dev1
        executor: infrastructure_container_unstable
        steps:
            - deploy_steps
    deploy_dev2:
        environment:
            - DEPLOY_ENV: dev2
        executor: infrastructure_container_unstable
        steps:
            - deploy_steps
    deploy_integration:
        environment:
            - DEPLOY_ENV: integration
            - DEPLOY_DOWNTIME: 900
        executor: infrastructure_container_unstable
        steps:
            - deploy_steps
    deploy_next:
        environment:
            - DEPLOY_ENV: next
            - DEPLOY_DOWNTIME: 900
        executor: infrastructure_container_unstable
        steps:
            - deploy_steps
    deploy_uat_blue:
        environment:
            - DEPLOY_ENV: uat
            - DEPLOY_COLOR: blue
            - DEPLOY_DOWNTIME: 1800
        executor: infrastructure_container_stable
        steps:
            - deploy_steps
    deploy_uat_green:
        environment:
            - DEPLOY_ENV: uat
            - DEPLOY_COLOR: green
            - DEPLOY_DOWNTIME: 1800
        executor: infrastructure_container_stable
        steps:
            - deploy_steps
    docker_db_smoke_test:
        docker:
            - image: circleci/buildpack-deps:bionic
        environment:
            - DOCKERHUB_REPO: aeternity/aeternity
            - AE__CHAIN__PERSIST: true
        steps:
            - fixed_checkout
            - setup_docker
            - run:
                command: sudo apt-get update && sudo apt-get install -y libsodium23 libtinfo5 libssl1.0
                name: Install OS Deps
            - run:
                command: wget https://releases.aeternity.io/aeternity-latest-ubuntu-x86_64.tar.gz
                name: Download latest release package
            - run:
                command: mkdir node_stable && tar -xvf aeternity-latest-ubuntu-x86_64.tar.gz -C ./node_stable
                name: Unzip stable node
            - run:
                command: |
                    ./node_stable/bin/aeternity start
                    sleep 60 # Let it sync a bit
                    ./node_stable/bin/aeternity stop
                name: Generate an old DB
            - run:
                command: |
                    docker pull aeternity/builder:bionic-otp22
                    docker build -t ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH/\//_} .
                name: Build branch docker image
            - run:
                command: |
                    docker run -d --name ae_${CIRCLE_SHA1:?} ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH/\//_} sleep 1337
                name: Start container
            - run:
                command: |
                    docker exec -u root -it ae_${CIRCLE_SHA1:?} mkdir /old_db
                    docker cp ./node_stable/data/mnesia ae_${CIRCLE_SHA1:?}:/old_db/mnesia
                    docker exec -u root -it ae_${CIRCLE_SHA1:?} chown -R aeternity:aeternity /old_db/mnesia
                name: Copy the old DB into the container
            - run:
                background: true
                command: |
                    export AE__CHAIN__DB_PATH=/old_db
                    docker exec -it -e AE__CHAIN__DB_PATH -e AE__CHAIN__PERSIST -e AE__FORK_MANAGEMENT__NETWORK_ID ae_${CIRCLE_SHA1:?} bin/aeternity console -noinput
                name: Exec the node
            - run:
                command: |
                    docker exec -it ae_${CIRCLE_SHA1:?} curl -4 --retry-connrefused --max-time 60 --retry 6 --connect-timeout 10 http://localhost:3013/v2/status
                name: Wait for the node to be ready
            - run:
                command: |
                    until [ "`docker inspect -f {{.State.Health.Status}} ae_${CIRCLE_SHA1:?}`"=="healthy" ]; do
                        sleep 1;
                    done;
                name: Health check
    docker_js_sdk_smoke_test:
        environment:
            - AE__CHAIN__PERSIST: false
            - AE__FORK_MANAGEMENT__NETWORK_ID: local_iris_testnet
        executor: buildpack
        steps:
            - fixed_checkout
            - setup_docker
            - docker_build_branch
            - run:
                command: docker run -d --network container:ae_${CIRCLE_SHA1:?} --name nodejs circleci/node:15.0.0-buster sleep 1337
                name: Start NodeJS
            - run:
                command: docker cp ./sdk_smoke_test/aepp-sdk-js nodejs:/tests
                name: Copy tests
            - run:
                command: docker exec -it nodejs sh -c "cd /tests && npm ci && npm test"
                name: Run JS SDK smoke test
    docker_push_latest:
        executor: infrastructure_container_stable
        parameters:
            aeplugin_devmode:
                default: false
                type: boolean
            tag_suffix:
                default: ""
                type: string
        steps:
            - fixed_checkout
            - when:
                condition: << parameters.aeplugin_devmode >>
                steps:
                    - aeplugin_install_devmode
            - setup_docker
            - docker_login
            - run:
                command: |
                    docker pull ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?}
                    docker tag ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?} ${DOCKERHUB_REPO:?}:latest<< parameters.tag_suffix >>
                    docker push ${DOCKERHUB_REPO:?}:latest<< parameters.tag_suffix >>
                name: Build and push Docker image to DockerHub
    docker_push_tag:
        executor: infrastructure_container_stable
        parameters:
            aeplugin_devmode:
                default: false
                type: boolean
            tag_suffix:
                default: ""
                type: string
        steps:
            - fixed_checkout
            - when:
                condition: << parameters.aeplugin_devmode >>
                steps:
                    - aeplugin_install_devmode
            - setup_docker
            - docker_login
            - run:
                command: |
                    docker build -t ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?}<< parameters.tag_suffix >> .
                    docker push ${DOCKERHUB_REPO:?}:${CIRCLE_TAG:?}<< parameters.tag_suffix >>
                name: Build and push Docker image to DockerHub
    docker_smoke_tests:
        executor: buildpack
        steps:
            - fixed_checkout
            - setup_docker
            - docker_build_branch
    docker_system_smoke_tests:
        executor: machine_1604
        steps:
            - print_system_test_host_info
            - fixed_checkout
            - install_os_deps
            - install_otp
            - install_libsodium
            - restore_machine_build_cache
            - prepare_ubuntu_user
            - install_system_smoke_test_deps
            - run:
                command: |
                    sudo -u ubuntu -E -H make smoke-test-run
                name: System Smoke Tests
                no_output_timeout: 1h
            - collect_system_test_host_logs
            - fail_notification_system_test
            - save_machine_build_cache
            - store_test_results:
                path: << pipeline.parameters.system_test_logs >>
            - store_artifacts:
                path: << pipeline.parameters.system_test_logs >>
            - store_artifacts:
                path: << pipeline.parameters.system_test_host_logs >>
    docker_system_tests:
        executor: machine_1604
        steps:
            - print_system_test_host_info
            - fixed_checkout
            - install_os_deps
            - install_otp
            - install_libsodium
            - restore_rebar_cache
            - restore_machine_build_cache
            - prepare_ubuntu_user
            - install_system_test_deps
            - run:
                command: |
                    sudo -u ubuntu -E -H make system-test
                name: System Tests
                no_output_timeout: 2h
            - collect_system_test_host_logs
            - fail_notification_system_test
            - save_machine_build_cache
            - store_test_results:
                path: << pipeline.parameters.system_test_logs >>
            - store_artifacts:
                path: << pipeline.parameters.system_test_logs >>
            - store_artifacts:
                path: << pipeline.parameters.system_test_host_logs >>
    docker_test_push_branch:
        executor: buildpack
        parameters:
            aeplugin_devmode:
                default: false
                type: boolean
            tag_suffix:
                default: ""
                type: string
        steps:
            - fixed_checkout
            - when:
                condition: << parameters.aeplugin_devmode >>
                steps:
                    - aeplugin_install_devmode
            - setup_docker
            - docker_build_branch:
                tag_suffix: <<parameters.tag_suffix>>
            - run:
                command: |
                    docker login -u $DOCKER_USER -p $DOCKER_PASS
                    docker push ${DOCKERHUB_REPO:?}:${CIRCLE_BRANCH/\//_}<<parameters.tag_suffix>>
                name: Push Docker image to DockerHub
            - fail_notification
    eunit_fortuna:
        environment:
            - MAKE_TARGET: eunit-fortuna
        executor: builder_container_otp22
        steps:
            - eunit_steps_otp22
    eunit_latest:
        environment:
            - MAKE_TARGET: eunit-latest
        executor: builder_container_otp22
        steps:
            - eunit_steps_otp22
    eunit_lima:
        environment:
            - MAKE_TARGET: eunit-lima
        executor: builder_container_otp22
        steps:
            - eunit_steps_otp22
    eunit_minerva:
        environment:
            - MAKE_TARGET: eunit-minerva
        executor: builder_container_otp22
        steps:
            - eunit_steps_otp22
    eunit_roma:
        environment:
            - MAKE_TARGET: eunit-roma
        executor: builder_container_otp22
        steps:
            - eunit_steps_otp22
    js_sdk_smoke_test:
        docker:
            - image: circleci/buildpack-deps:bionic
        environment:
            - AE__CHAIN__PERSIST: false
            - AE__FORK_MANAGEMENT__NETWORK_ID: local_iris_testnet
            - PACKAGES_DIR: << pipeline.parameters.packages_workspace >>
        steps:
            - fixed_checkout
            - run:
                command: |
                    curl -fsSL https://deb.nodesource.com/setup_15.x | sudo -E bash -
                    sudo apt-get update && sudo apt-get install -y nodejs libsodium23 libtinfo5 libssl1.0
                name: Install OS Deps
            - set_package_path
            - attach_workspace:
                at: << pipeline.parameters.packages_workspace >>
            - run:
                command: cd ./sdk_smoke_test/aepp-sdk-js && npm ci
                name: Install JS SDK
            - run:
                command: mkdir node && tar -xvf ${PACKAGE_TARBALL:?} -C ./node
                name: Unzip built node
            - run:
                command: ./node/bin/aeternity start
                name: Start node
            - run:
                command: curl -4 --retry-connrefused --max-time 60 --retry 6 --connect-timeout 10 http://localhost:3013/v2/status
                name: Wait for the node api to boot
            - run:
                command: cd ./sdk_smoke_test/aepp-sdk-js && npm test
                name: Run js sdk smoke test
            - run:
                command: ./node/bin/aeternity stop
                name: Stop node
            - fail_notification
    linux_package:
        environment:
            PKG_KIND: << parameters.package_kind >>
        executor: builder_container_otp22
        parameters:
            aeplugin_devmode:
                default: false
                type: boolean
            package_kind:
                default: ""
                type: string
        steps:
            - fixed_checkout
            - when:
                condition: << parameters.aeplugin_devmode >>
                steps:
                    - aeplugin_install_devmode
            - set_package_path
            - test_arch_os_dependencies
            - build_package
            - store_artifacts:
                path: /tmp/package_tests/node1/log
            - store_artifacts:
                path: /tmp/package_tests/node2/log
            - store_artifacts:
                path: /tmp/package_tests/node3/log
            - store_package_artifacts
            - store_rebar3_crashdump
            - persist_to_workspace:
                paths:
                    - '*.tar.gz'
                root: << pipeline.parameters.packages_workspace >>
            - fail_notification
    osx_package:
        environment:
            PKG_KIND: << parameters.package_kind >>
        macos:
            xcode: 11.1.0
        parameters:
            aeplugin_devmode:
                default: false
                type: boolean
            package_kind:
                default: ""
                type: string
        steps:
            - fixed_checkout
            - when:
                condition: << parameters.aeplugin_devmode >>
                steps:
                    - aeplugin_install_devmode
            - restore_macos_package_cache
            - run:
                command: |
                    git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core" fetch --unshallow
                    git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask" fetch --unshallow
                    brew update
                    brew rm python@2
                    brew install gmp libsodium erlang@22 cmake
                    brew link gmp
                    brew link libsodium
                    brew link --force erlang@22
                    brew link cmake
                name: Install required tools
            - save_macos_package_cache
            - set_package_path
            - test_arch_os_dependencies
            - build_package
            - store_artifacts:
                path: /tmp/package_tests/node1/log
            - store_artifacts:
                path: /tmp/package_tests/node2/log
            - store_artifacts:
                path: /tmp/package_tests/node3/log
            - store_package_artifacts
            - persist_to_workspace:
                paths:
                    - '*.tar.gz'
                root: << pipeline.parameters.packages_workspace >>
            - fail_notification
        working_directory: /home/circleci/aeternity
    publish_build_packages:
        executor: buildpack
        steps:
            - fixed_checkout
            - attach_workspace:
                at: << pipeline.parameters.packages_workspace >>
            - publish_ubuntu_package:
                component: testing
                packages_dir: << pipeline.parameters.packages_workspace >>
            - fail_notification
    publish_release_packages:
        executor: buildpack
        steps:
            - fixed_checkout
            - attach_workspace:
                at: << pipeline.parameters.packages_workspace >>
            - publish_ubuntu_package:
                component: main
                packages_dir: << pipeline.parameters.packages_workspace >>
            - publish_osx_package:
                branch: master
                packages_dir: << pipeline.parameters.packages_workspace >>
            - fail_notification
    rebar_lock_check:
        executor: builder_container_otp22
        steps:
            - fixed_checkout
            - run:
                command: |
                    ./rebar3 upgrade
                    git diff --quiet -- rebar.lock || (echo "rebar.lock is not up-to-date" && exit 1)
                name: Ensure lock file is up-to-date
            - store_rebar3_crashdump
            - fail_notification
    static_analysis:
        executor: builder_container_otp22
        steps:
            - fixed_checkout
            - run: make dockerignore-check
            - restore_rebar_cache
            - restore_build_otp22_cache
            - run: make edoc
            - restore_cache:
                keys:
                    - dialyzer-otp22-cache-v5-{{ .Branch }}-{{ .Revision }}
                    - dialyzer-otp22-cache-v5-{{ .Branch }}-
                    - dialyzer-otp22-cache-v5-
            - run:
                command: make dialyzer-install
                name: Update dialyzer PLT
            - save_cache:
                key: dialyzer-otp22-cache-v5-{{ .Branch }}-{{ .Revision }}
                paths:
                    - << pipeline.parameters.container_otp22_plt >>
            - run:
                command: make dialyzer
                name: Run dialyzer
                no_output_timeout: 20m
            - run:
                command: test "${OTP_VERSION:?}" = $(cat $(erl -noinput -eval 'io:format("~s", [filename:join([code:root_dir(), "releases", erlang:system_info(otp_release), "OTP_VERSION"])]), init:stop().'))
                name: Check OTP version (for effective CI caching)
            - store_rebar3_crashdump
            - fail_notification
    static_analysis_otp23:
        executor: builder_container_otp23
        steps:
            - fixed_checkout
            - restore_rebar_cache
            - restore_build_otp23_cache
            - restore_cache:
                keys:
                    - dialyzer-otp23-cache-v4-{{ .Branch }}-{{ .Revision }}
                    - dialyzer-otp23-cache-v4-{{ .Branch }}-
                    - dialyzer-otp23-cache-v4-
            - run:
                command: make dialyzer-install
                name: Update dialyzer PLT
            - save_cache:
                key: dialyzer-otp23-cache-v4-{{ .Branch }}-{{ .Revision }}
                paths:
                    - << pipeline.parameters.container_otp23_plt >>
            - run:
                command: make dialyzer
                name: Run dialyzer
                no_output_timeout: 20m
            - run:
                command: test "${OTP_VERSION:?}" = $(cat $(erl -noinput -eval 'io:format("~s", [filename:join([code:root_dir(), "releases", erlang:system_info(otp_release), "OTP_VERSION"])]), init:stop().'))
                name: Check OTP version (for effective CI caching)
            - store_rebar3_crashdump
            - fail_notification
    test_fortuna:
        environment:
            - MAKE_TARGET: ct-fortuna
        executor: builder_container_otp22
        parallelism: 3
        steps:
            - test_steps_otp22
    test_latest:
        environment:
            - MAKE_TARGET: ct-latest
        executor: builder_container_otp22
        parallelism: 3
        steps:
            - test_steps_otp22
    test_latest_otp23:
        environment:
            - MAKE_TARGET: ct-latest
        executor: builder_container_otp23
        parallelism: 3
        steps:
            - test_steps_otp23
    test_latest_with_aesophia_compiler:
        environment:
            - MAKE_TARGET: ct-latest-no-aci
        executor: builder_container_otp22
        parallelism: 1
        steps:
            - test_steps_otp22
    test_lima:
        environment:
            - MAKE_TARGET: ct-lima
        executor: builder_container_otp22
        parallelism: 3
        steps:
            - test_steps_otp22
    test_minerva:
        environment:
            - MAKE_TARGET: ct-minerva
        executor: builder_container_otp22
        parallelism: 3
        steps:
            - test_steps_otp22
    test_mnesia_leveled:
        environment:
            - MAKE_TARGET: ct-mnesia-leveled
        executor: builder_container_otp22
        parallelism: 3
        steps:
            - test_steps_otp22
    test_mnesia_rocksdb:
        environment:
            - MAKE_TARGET: ct-mnesia-rocksdb
        executor: builder_container_otp22
        parallelism: 3
        steps:
            - test_steps_otp22
    test_roma:
        environment:
            - MAKE_TARGET: ct-roma
        executor: builder_container_otp22
        parallelism: 3
        steps:
            - test_steps_otp22
    ubuntu_package:
        executor: builder_container_1804
        steps:
            - fixed_checkout
            - build_ubuntu_package
            - store_package_artifacts
            - persist_to_workspace:
                paths:
                    - '*.deb'
                root: << pipeline.parameters.packages_workspace >>
            - fail_notification
        working_directory: /home/builder/aeternity_deb
    upload_build_artifacts:
        environment:
            PACKAGES_DIR: << pipeline.parameters.packages_workspace >>
        executor: infrastructure_container_stable
        steps:
            - upload_build_artifacts
    upload_latest_packages_linux:
        environment:
            PACKAGES_DIR: << pipeline.parameters.packages_workspace >>
            PKG_TARGET_OS: ubuntu
        executor: infrastructure_container_stable
        steps:
            - upload_latest_artifacts
    upload_latest_packages_osx:
        environment:
            PACKAGES_DIR: << pipeline.parameters.packages_workspace >>
            PKG_TARGET_OS: macos
        executor: infrastructure_container_stable
        steps:
            - upload_latest_artifacts
    upload_packages_linux:
        environment:
            PACKAGES_DIR: << pipeline.parameters.packages_workspace >>
            PKG_TARGET_OS: ubuntu
        executor: infrastructure_container_stable
        steps:
            - upload_release_artifacts
    upload_packages_osx:
        environment:
            PACKAGES_DIR: << pipeline.parameters.packages_workspace >>
            PKG_TARGET_OS: macos
        executor: infrastructure_container_stable
        steps:
            - upload_release_artifacts
    verify_release_artifacts:
        environment:
            PACKAGES_DIR: << pipeline.parameters.packages_workspace >>
        executor: infrastructure_container_stable
        steps:
            - run:
                command: |
                    /infrastructure/scripts/check_release_artifacts.sh ${CIRCLE_TAG}
                name: Verify release artifacts
parameters:
    aeplugin_devmode_version:
        default: 0.2.0
        type: string
    build_nix_cache_key:
        default: build-nix-cache-v3-{{ .Revision }}
        type: string
    build_otp22_cache_key:
        default: build-otp22-cache-v3-{{ .Revision }}
        type: string
    build_otp23_cache_key:
        default: build-otp23-cache-v4-{{ .Revision }}
        type: string
    container_otp22_plt:
        default: _build/default/rebar3_22.3.4.9_plt
        type: string
    container_otp23_plt:
        default: _build/default/rebar3_23.3.4.5_plt
        type: string
    machine_build_cache_key:
        default: machine-build-cache-v19-{{ .Branch }}-{{ .Revision }}
        type: string
    macos_package_cache_key:
        default: macos-package-cache-v4
        type: string
    master_branch:
        default: master
        type: string
    packages_workspace:
        default: /tmp/packages
        type: string
    rebar_cache_key:
        default: rebar-cache-{{ checksum "rebar.lock" }}-{{ checksum "rebar.config" }}
        type: string
    system_test_host_logs:
        default: /tmp/system_test_host
        type: string
    system_test_logs:
        default: system_test/logs
        type: string
    tag_regex:
        default: /^v.*$/
        type: string
version: 2.1
workflows:
    commit:
        jobs:
            - build:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
            - build_otp23:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
            - build_nix:
                filters:
                    branches:
                        only:
                            - << pipeline.parameters.master_branch >>
            - docker_smoke_tests:
                context: ae-node-builds
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                            - /releases\/.*/
                            - << pipeline.parameters.master_branch >>
            - docker_js_sdk_smoke_test:
                context: ae-node-builds
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                            - /releases\/.*/
                            - << pipeline.parameters.master_branch >>
                requires:
                    - docker_smoke_tests
            - docker_db_smoke_test:
                context: ae-node-builds
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                            - /releases\/.*/
                            - << pipeline.parameters.master_branch >>
                requires:
                    - docker_smoke_tests
            - docker_system_smoke_tests:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires: []
            - js_sdk_smoke_test:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - linux_package
            - db_smoke_test:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - linux_package
            - test_roma:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - build
            - test_minerva:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - build
            - test_fortuna:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - build
            - test_lima:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - build
            - test_latest:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - build
            - test_latest_with_aesophia_compiler:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - build
            - test_latest_otp23:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - build_otp23
            - test_mnesia_leveled:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - build
            - test_mnesia_rocksdb:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - build
            - eunit_roma:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                    tags:
                        only: << pipeline.parameters.tag_regex >>
                requires:
                    - build
            - eunit_minerva:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                    tags:
                        only: << pipeline.parameters.tag_regex >>
                requires:
                    - build
            - eunit_fortuna:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                    tags:
                        only: << pipeline.parameters.tag_regex >>
                requires:
                    - build
            - eunit_lima:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                    tags:
                        only: << pipeline.parameters.tag_regex >>
                requires:
                    - build
            - eunit_latest:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                    tags:
                        only: << pipeline.parameters.tag_regex >>
                requires:
                    - build
            - aevm_tests:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                    tags:
                        only: << pipeline.parameters.tag_regex >>
                requires:
                    - build
            - docker_system_tests:
                filters:
                    branches:
                        only: system-tests
            - static_analysis:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - build
            - static_analysis_otp23:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - build_otp23
            - rebar_lock_check:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - build
            - linux_package:
                filters:
                    branches:
                        ignore:
                            - system-tests
            - linux_package:
                aeplugin_devmode: true
                filters:
                    branches:
                        ignore:
                            - system-tests
                name: linux_package_bundle
                package_kind: bundle
            - ubuntu_package:
                filters:
                    branches:
                        only:
                            - /releases\/.*/
                            - << pipeline.parameters.master_branch >>
                requires: []
            - upload_build_artifacts:
                context: ae-node-builds
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - linux_package
            - osx_package:
                filters:
                    branches:
                        only:
                            - /releases\/.*/
                            - << pipeline.parameters.master_branch >>
                requires: []
            - osx_package:
                aeplugin_devmode: true
                filters:
                    branches:
                        only:
                            - /releases\/.*/
                            - << pipeline.parameters.master_branch >>
                name: osx_package_bundle
                package_kind: bundle
            - publish_build_packages:
                filters:
                    branches:
                        only:
                            - /releases\/.*/
                            - << pipeline.parameters.master_branch >>
                requires:
                    - ubuntu_package
            - deploy_integration:
                context: ae-node-builds
                filters:
                    branches:
                        only: master
                requires:
                    - docker_db_smoke_test
                    - db_smoke_test
                    - test_roma
                    - test_minerva
                    - test_fortuna
                    - test_lima
                    - test_latest
                    - test_latest_with_aesophia_compiler
                    - test_mnesia_leveled
                    - test_mnesia_rocksdb
                    - eunit_roma
                    - eunit_minerva
                    - eunit_fortuna
                    - eunit_lima
                    - eunit_latest
                    - aevm_tests
                    - static_analysis
                    - rebar_lock_check
                    - linux_package
                    - build_uml_diagrams
            - docker_test_push_branch:
                context: ae-node-builds
                filters:
                    branches:
                        only:
                            - << pipeline.parameters.master_branch >>
                name: docker_push_master
                requires:
                    - test_roma
                    - test_minerva
                    - test_fortuna
                    - test_lima
                    - test_latest
                    - test_latest_with_aesophia_compiler
                    - test_mnesia_leveled
                    - test_mnesia_rocksdb
                    - eunit_roma
                    - eunit_minerva
                    - eunit_fortuna
                    - eunit_lima
                    - eunit_latest
                    - aevm_tests
                    - static_analysis
                    - rebar_lock_check
            - docker_test_push_branch:
                aeplugin_devmode: true
                context: ae-node-builds
                filters:
                    branches:
                        only:
                            - << pipeline.parameters.master_branch >>
                name: docker_push_master_bundle
                requires:
                    - test_roma
                    - test_minerva
                    - test_fortuna
                    - test_lima
                    - test_latest
                    - test_latest_with_aesophia_compiler
                    - test_mnesia_leveled
                    - test_mnesia_rocksdb
                    - eunit_roma
                    - eunit_minerva
                    - eunit_fortuna
                    - eunit_lima
                    - eunit_latest
                    - aevm_tests
                    - static_analysis
                    - rebar_lock_check
                tag_suffix: -bundle
            - deploy_next:
                context: ae-node-builds
                filters:
                    branches:
                        only: << pipeline.parameters.master_branch >>
                requires:
                    - test_roma
                    - test_minerva
                    - test_fortuna
                    - test_lima
                    - test_latest
                    - test_latest_with_aesophia_compiler
                    - test_mnesia_leveled
                    - test_mnesia_rocksdb
                    - eunit_roma
                    - eunit_minerva
                    - eunit_fortuna
                    - eunit_lima
                    - eunit_latest
                    - aevm_tests
                    - static_analysis
                    - rebar_lock_check
                    - linux_package
            - deploy_dev1:
                context: ae-node-builds
                filters:
                    branches:
                        only: env/dev1
                requires:
                    - linux_package
            - deploy_dev2:
                context: ae-node-builds
                filters:
                    branches:
                        only: env/dev2
                requires:
                    - linux_package
            - build_uml_diagrams:
                filters:
                    branches:
                        ignore:
                            - env/dev1
                            - env/dev2
                            - system-tests
                requires:
                    - build
    release:
        jobs:
            - linux_package
            - linux_package:
                aeplugin_devmode: true
                name: linux_package_bundle
                package_kind: bundle
            - ubuntu_package
            - osx_package
            - osx_package:
                aeplugin_devmode: true
                name: osx_package_bundle
                package_kind: bundle
            - hodl_artifact_upload:
                type: approval
            - upload_packages_linux:
                context: ae-node-builds
                requires:
                    - linux_package
                    - linux_package_bundle
                    - hodl_artifact_upload
            - upload_packages_osx:
                context: ae-node-builds
                requires:
                    - osx_package
                    - osx_package_bundle
                    - hodl_artifact_upload
            - docker_push_tag:
                context: ae-node-builds
                requires:
                    - hodl_artifact_upload
            - docker_push_tag:
                aeplugin_devmode: true
                context: ae-node-builds
                name: docker_push_tag_bundle
                requires:
                    - hodl_artifact_upload
                tag_suffix: -bundle
            - hodl_blue:
                type: approval
            - deploy_uat_blue:
                context: ae-node-builds
                requires:
                    - linux_package
                    - hodl_blue
            - hodl_green:
                type: approval
            - deploy_uat_green:
                context: ae-node-builds
                requires:
                    - linux_package
                    - deploy_uat_blue
                    - hodl_green
            - hodl_latest:
                type: approval
            - upload_latest_packages_linux:
                context: ae-node-builds
                requires:
                    - linux_package
                    - hodl_latest
            - upload_latest_packages_osx:
                context: ae-node-builds
                requires:
                    - osx_package
                    - hodl_latest
            - publish_release_packages:
                requires:
                    - linux_package
                    - osx_package
                    - hodl_latest
            - docker_push_latest:
                context: ae-node-builds
                requires:
                    - docker_push_tag
                    - hodl_latest
            - docker_push_latest:
                aeplugin_devmode: true
                context: ae-node-builds
                name: docker_push_latest_bundle
                requires:
                    - docker_push_tag
                    - hodl_latest
                tag_suffix: -bundle
            - verify_release_artifacts:
                context: ae-node-builds
                requires:
                    - upload_packages_linux
                    - upload_latest_packages_linux
                    - upload_packages_osx
                    - upload_latest_packages_osx
                    - docker_push_tag
                    - docker_push_latest
        when:
            equal:
                - refactor_ci_config
                - << pipeline.git.branch >>
    system-tests:
        jobs:
            - docker_system_tests
        triggers:
            - schedule:
                cron: 0 0,12 * * *
                filters:
                    branches:
                        only:
                            - << pipeline.parameters.master_branch >>
    version: 2

